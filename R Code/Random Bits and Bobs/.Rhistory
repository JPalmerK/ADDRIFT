}
csvOut$calib[ii]<-extracted_value
print(ii)
for(ii in 3:length(AdriftDir)){
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.table(fnamePSD, head = TRUE, nrows=1)
thirdOct= read.csv(fnameTrdOct)
# Frequency range
freqNames = colnames(freqRange)[c(2,dim(freqRange)[2])]
freqRange = as.numeric(gsub("PSD_", "", freqNames))
csvOut$LowBand[ii] = freqRange[1]
csvOut$HighBand[ii] = freqRange[2]
# Get the time range
tzval = ifelse(length(isPST)>1, "America/Los_Angeles", 'utc')
Tvals = as.POSIXct(thirdOct[c(1,dim(thirdOct)[1]),1],
format ="%Y-%m-%dT%H:%M:%OSZ", tz= tzval)
csvOut$dataStart[ii] = Tvals[1]
csvOut$dataEnd[ii] = Tvals[2]
# read in the text file and pull out the offset
logfile =  file.path(currentDriftDir, 'logfile.txt')
text<-readLines(logfile, warn = FALSE)
# Define the regular expression pattern to match the phrase
pattern <- "Single value full system calibration: ([0-9.]+) dB"
# Find the match in the text
matches <- grep(pattern, text, value = TRUE)
# Extract the numerical value
if (length(matches) > 0) {
match_result <- regmatches(matches, regexec(pattern, matches))[[1]]
extracted_value <- as.numeric(match_result[2])
print(extracted_value)
} else {
print("Pattern not found in the text.")
}
csvOut$calib[ii]<-extracted_value
print(ii)
}
ii
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.table(fnamePSD, head = TRUE, nrows=1)
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
driftID = substr(driftID, 1, 10)
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.table(fnamePSD, head = TRUE, nrows=1)
driftID
ii
for(ii in 45:length(AdriftDir)){
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.table(fnamePSD, head = TRUE, nrows=1)
thirdOct= read.csv(fnameTrdOct)
# Frequency range
freqNames = colnames(freqRange)[c(2,dim(freqRange)[2])]
freqRange = as.numeric(gsub("PSD_", "", freqNames))
csvOut$LowBand[ii] = freqRange[1]
csvOut$HighBand[ii] = freqRange[2]
# Get the time range
tzval = ifelse(length(isPST)>1, "America/Los_Angeles", 'utc')
Tvals = as.POSIXct(thirdOct[c(1,dim(thirdOct)[1]),1],
format ="%Y-%m-%dT%H:%M:%OSZ", tz= tzval)
csvOut$dataStart[ii] = Tvals[1]
csvOut$dataEnd[ii] = Tvals[2]
# read in the text file and pull out the offset
logfile =  file.path(currentDriftDir, 'logfile.txt')
text<-readLines(logfile, warn = FALSE)
# Define the regular expression pattern to match the phrase
pattern <- "Single value full system calibration: ([0-9.]+) dB"
# Find the match in the text
matches <- grep(pattern, text, value = TRUE)
# Extract the numerical value
if (length(matches) > 0) {
match_result <- regmatches(matches, regexec(pattern, matches))[[1]]
extracted_value <- as.numeric(match_result[2])
print(extracted_value)
} else {
print("Pattern not found in the text.")
}
csvOut$calib[ii]<-extracted_value
print(ii)
}
ii
for(ii in 81:length(AdriftDir)){
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.table(fnamePSD, head = TRUE, nrows=1)
thirdOct= read.csv(fnameTrdOct)
# Frequency range
freqNames = colnames(freqRange)[c(2,dim(freqRange)[2])]
freqRange = as.numeric(gsub("PSD_", "", freqNames))
csvOut$LowBand[ii] = freqRange[1]
csvOut$HighBand[ii] = freqRange[2]
# Get the time range
tzval = ifelse(length(isPST)>1, "America/Los_Angeles", 'utc')
Tvals = as.POSIXct(thirdOct[c(1,dim(thirdOct)[1]),1],
format ="%Y-%m-%dT%H:%M:%OSZ", tz= tzval)
csvOut$dataStart[ii] = Tvals[1]
csvOut$dataEnd[ii] = Tvals[2]
# read in the text file and pull out the offset
logfile =  file.path(currentDriftDir, 'logfile.txt')
text<-readLines(logfile, warn = FALSE)
# Define the regular expression pattern to match the phrase
pattern <- "Single value full system calibration: ([0-9.]+) dB"
# Find the match in the text
matches <- grep(pattern, text, value = TRUE)
# Extract the numerical value
if (length(matches) > 0) {
match_result <- regmatches(matches, regexec(pattern, matches))[[1]]
extracted_value <- as.numeric(match_result[2])
print(extracted_value)
} else {
print("Pattern not found in the text.")
}
csvOut$calib[ii]<-extracted_value
print(ii)
}
ii
for(ii in 81:length(AdriftDir)){
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.table(fnamePSD, head = TRUE, nrows=1)
thirdOct= read.csv(fnameTrdOct)
# Frequency range
freqNames = colnames(freqRange)[c(2,dim(freqRange)[2])]
freqRange = as.numeric(gsub("PSD_", "", freqNames))
csvOut$LowBand[ii] = freqRange[1]
csvOut$HighBand[ii] = freqRange[2]
# Get the time range
tzval = ifelse(length(isPST)>1, "America/Los_Angeles", 'utc')
Tvals = as.POSIXct(thirdOct[c(1,dim(thirdOct)[1]),1],
format ="%Y-%m-%dT%H:%M:%OSZ", tz= tzval)
csvOut$dataStart[ii] = Tvals[1]
csvOut$dataEnd[ii] = Tvals[2]
# read in the text file and pull out the offset
logfile =  file.path(currentDriftDir, 'logfile.txt')
text<-readLines(logfile, warn = FALSE)
# Define the regular expression pattern to match the phrase
pattern <- "Single value full system calibration: ([0-9.]+) dB"
# Find the match in the text
matches <- grep(pattern, text, value = TRUE)
# Extract the numerical value
if (length(matches) > 0) {
match_result <- regmatches(matches, regexec(pattern, matches))[[1]]
extracted_value <- as.numeric(match_result[2])
print(extracted_value)
} else {
print("Pattern not found in the text.")
}
csvOut$calib[ii]<-extracted_value
print(ii)
}
ii=9
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.table(fnamePSD, head = TRUE, nrows=1)
thirdOct= read.csv(fnameTrdOct)
# Frequency range
freqNames = colnames(freqRange)[c(2,dim(freqRange)[2])]
freqRange = as.numeric(gsub("PSD_", "", freqNames))
csvOut$LowBand[ii] = freqRange[1]
csvOut$HighBand[ii] = freqRange[2]
# Get the time range
tzval = ifelse(length(isPST)>1, "America/Los_Angeles", 'utc')
Tvals = as.POSIXct(thirdOct[c(1,dim(thirdOct)[1]),1],
format ="%Y-%m-%dT%H:%M:%OSZ", tz= tzval)
csvOut$dataStart[ii] = Tvals[1]
csvOut$dataEnd[ii] = Tvals[2]
# read in the text file and pull out the offset
logfile =  file.path(currentDriftDir, 'logfile.txt')
text<-readLines(logfile, warn = FALSE)
# Define the regular expression pattern to match the phrase
pattern <- "Single value full system calibration: ([0-9.]+) dB"
# Find the match in the text
matches <- grep(pattern, text, value = TRUE)
# Extract the numerical value
if (length(matches) > 0) {
match_result <- regmatches(matches, regexec(pattern, matches))[[1]]
extracted_value <- as.numeric(match_result[2])
print(extracted_value)
} else {
print("Pattern not found in the text.")
}
csvOut$calib[ii]<-extracted_value
print(ii)
freqRange = read.table(fnamePSD, head = TRUE, nrows=1)
colnames(freqRange)[c(2,dim(freqRange)[2])]
fnamePSD
ii
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
driftID
AdriftDir
aa = fnamePSD
aa =freqRange
ii=6
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.table(fnamePSD, head = TRUE, nrows=1)
thirdOct= read.csv(fnameTrdOct)
bb =freqRange
str(aa)
str(bb)
? read.csv
? read.csv2
freqRange = read.csv(fnamePSD, head = TRUE, nrows=1)
ii
aa = freqRange;
ii=7
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.csv(fnamePSD, head = TRUE, nrows=1)
bb =freqRange
View(aa)
View(bb)
ii
ii=6
ii=7
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.csv(fnamePSD, head = TRUE, nrows=1)
thirdOct= read.csv(fnameTrdOct)
# Frequency range
freqNames = colnames(freqRange)[c(2,dim(freqRange)[2])]
freqRange = as.numeric(gsub("PSD_", "", freqNames))
csvOut$LowBand[ii] = freqRange[1]
csvOut$HighBand[ii] = freqRange[2]
# Get the time range
tzval = ifelse(length(isPST)>1, "America/Los_Angeles", 'utc')
Tvals = as.POSIXct(thirdOct[c(1,dim(thirdOct)[1]),1],
format ="%Y-%m-%dT%H:%M:%OSZ", tz= tzval)
csvOut$dataStart[ii] = Tvals[1]
csvOut$dataEnd[ii] = Tvals[2]
# read in the text file and pull out the offset
logfile =  file.path(currentDriftDir, 'logfile.txt')
text<-readLines(logfile, warn = FALSE)
# Define the regular expression pattern to match the phrase
pattern <- "Single value full system calibration: ([0-9.]+) dB"
# Find the match in the text
matches <- grep(pattern, text, value = TRUE)
# Extract the numerical value
if (length(matches) > 0) {
match_result <- regmatches(matches, regexec(pattern, matches))[[1]]
extracted_value <- as.numeric(match_result[2])
print(extracted_value)
} else {
print("Pattern not found in the text.")
}
csvOut$calib[ii]<-extracted_value
print(ii)
ii
for(ii in 9:length(AdriftDir)){
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.csv(fnamePSD, head = TRUE, nrows=1)
thirdOct= read.csv(fnameTrdOct)
# Frequency range
freqNames = colnames(freqRange)[c(2,dim(freqRange)[2])]
freqRange = as.numeric(gsub("PSD_", "", freqNames))
csvOut$LowBand[ii] = freqRange[1]
csvOut$HighBand[ii] = freqRange[2]
# Get the time range
tzval = ifelse(length(isPST)>1, "America/Los_Angeles", 'utc')
Tvals = as.POSIXct(thirdOct[c(1,dim(thirdOct)[1]),1],
format ="%Y-%m-%dT%H:%M:%OSZ", tz= tzval)
csvOut$dataStart[ii] = Tvals[1]
csvOut$dataEnd[ii] = Tvals[2]
# read in the text file and pull out the offset
logfile =  file.path(currentDriftDir, 'logfile.txt')
text<-readLines(logfile, warn = FALSE)
# Define the regular expression pattern to match the phrase
pattern <- "Single value full system calibration: ([0-9.]+) dB"
# Find the match in the text
matches <- grep(pattern, text, value = TRUE)
# Extract the numerical value
if (length(matches) > 0) {
match_result <- regmatches(matches, regexec(pattern, matches))[[1]]
extracted_value <- as.numeric(match_result[2])
print(extracted_value)
} else {
print("Pattern not found in the text.")
}
csvOut$calib[ii]<-extracted_value
print(ii)
}
ii
for(ii in 45:length(AdriftDir)){
# Get the drift name
currentDriftDir = AdriftDir[ii]
driftID<- basename(AdriftDir[ii])
# Flat if the data are in PST - use later
isPST = grep('pst', driftID)
# Cut the folder name if PST has been added
if(length(isPST) > 0) {driftID = substr(driftID, 1, 10)}
csvOut$driftID[ii]<-driftID
# Load up an example file that will have the frequency bounds and time bounds
fnamePSD<- file.path(currentDriftDir, paste0(driftID,'_PSD_2min.csv'))
fnameTrdOct<- file.path(currentDriftDir, paste0(driftID,'_TOL_2min.csv'))
# We only need the first and last column and the first and last row but those
# always change so we need to figure out the dimensions beforehand
freqRange = read.csv(fnamePSD, head = TRUE, nrows=1)
thirdOct= read.csv(fnameTrdOct)
# Frequency range
freqNames = colnames(freqRange)[c(2,dim(freqRange)[2])]
freqRange = as.numeric(gsub("PSD_", "", freqNames))
csvOut$LowBand[ii] = freqRange[1]
csvOut$HighBand[ii] = freqRange[2]
# Get the time range
tzval = ifelse(length(isPST)>1, "America/Los_Angeles", 'utc')
Tvals = as.POSIXct(thirdOct[c(1,dim(thirdOct)[1]),1],
format ="%Y-%m-%dT%H:%M:%OSZ", tz= tzval)
csvOut$dataStart[ii] = Tvals[1]
csvOut$dataEnd[ii] = Tvals[2]
# read in the text file and pull out the offset
logfile =  file.path(currentDriftDir, 'logfile.txt')
text<-readLines(logfile, warn = FALSE)
# Define the regular expression pattern to match the phrase
pattern <- "Single value full system calibration: ([0-9.]+) dB"
# Find the match in the text
matches <- grep(pattern, text, value = TRUE)
# Extract the numerical value
if (length(matches) > 0) {
match_result <- regmatches(matches, regexec(pattern, matches))[[1]]
extracted_value <- as.numeric(match_result[2])
print(extracted_value)
} else {
print("Pattern not found in the text.")
}
csvOut$calib[ii]<-extracted_value
print(ii)
}
ii
getwd()
write.csv(csvOut, 'Adrift Data Summaries')
write.csv(csvOut, 'Adrift Data Summaries.csv')
require(knitcitations)
cleanbib()
install.packages("knitcitations")
require(knitcitations)
cleanbib()
#biblio <- read.bibtex("newref.bib")
cite_options(citation_format = 'pandoc', cite.style = 'authoryear', max.names = 1, longnamesfirst=FALSE)
require(knitcitations)
cleanbib()
#biblio <- read.bibtex("newref.bib")
cite_options(citation_format = 'pandoc', cite.style = 'authoryear', max.names = 1, longnamesfirst=FALSE)
require(MRSea)
devtools::load_all(pkg='../../MRSeaPower')
library(MRSeaPower)
devtools::install_github("https://github.com/lindesaysh/MRSeaPower.git")
require(MRSea)
data("Nysted.distancecorrected.re")
setwd("~/GitHub/ADRIFT/R Code/Random Bits and Bobs")
#Prepare deployment details for Tethys
#Anne Simonis
#Create worksheet with 3 searate tabs: GPS, deployDetails, SensorDetails
#Must have GPS data saved in separate 'GPS' folder within the same folder
#where all deployment info is saved
##Example
#ProjectID = rep('CCES',15)
#DepID=c('004','007','008','010','012','013','014','016','017',
# '018','019','020','021','022','023')
#mapply(makeTethysDep,ProjectID,DepID)
#required packages
library(dplyr)
library(xlsx)
install.packages("xlsx")
#Prepare deployment details for Tethys
#Anne Simonis
#Create worksheet with 3 searate tabs: GPS, deployDetails, SensorDetails
#Must have GPS data saved in separate 'GPS' folder within the same folder
#where all deployment info is saved
##Example
#ProjectID = rep('CCES',15)
#DepID=c('004','007','008','010','012','013','014','016','017',
# '018','019','020','021','022','023')
#mapply(makeTethysDep,ProjectID,DepID)
#required packages
library(dplyr)
library(xlsx)
install.packages("openxlsx")
#required packages
library(dplyr)
library(xlsx)
install.packages("xlsx")
#required packages
library(dplyr)
library(xlsx)
#required packages
library(dplyr)
library(xlsx)
